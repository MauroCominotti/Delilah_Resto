swagger: "2.0"
info:
  description: "API RESTFUL."
  version: "1.0.0"
  title: "Delilah Resto"
  termsOfService: "http://swagger.io/terms/"
  contact: 
    email: "hola@acamica.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "DelilahResto.com"
tags:
- name: "user"
  description: "Operations about user"
- name: "product"
  description: "Everything about your products"
- name: "order"
  description: "Access to users orders"
schemes:
- "https"
- "http"
paths:
  /users/{Id}:
    get:
      tags:
      - "user"
      summary: "Find user by ID"
      description: "Returns to a administrator a single user"
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - name: "Id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
        403:
          $ref: '#/responses/UnauthorizedBothError'
      security:
        - bearerBothAuth: []
  /users/signIn:
    post:
      tags:
      - "user"
      summary: "Add a user in the view Sign In"
      description: "This can only be done in the sign in view."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful"
        500:
          description: "Internal Error"
  /users/logIn:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: "Logs user into the system in the view Log In"
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: body
        schema:
          type: object
          required:
            - username
            - password
          properties:
            username:
              description: "The user name for login"
              type: string
            password:
              description: "The password for login in clear text"
              type: string
      responses:
        200:
          description: "Successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        404:
          description: "Invalid username/password supplied"
  /users/admin:
    post:
      tags:
      - "user"
      summary: "Add a administrator"
      description: "This can only be done by a admin"
      operationId: "createAdmin"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedUserError'
      security:
        - bearerAdminAuth: []
  /users/delete/{Id}:
    delete:
      tags:
      - "user"
      summary: "Delete a User"
      description: "This can only be done by a admin"
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - name: "Id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedUserError'
      security:
        - bearerAdminAuth: []
  /users/populateTables:
    get:
      tags:
      - "user"
      summary: "Populate Tables with random data"
      description: "This can be done without token"
      operationId: "populateTables"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "The Tables have been successfully populated"
        500:
          description: "Internal Error"
  /products:
    get:
      tags:
      - "product"
      summary: "Find all products"
      description: "Returns all the products. This can only be done with a Token, no matter if you are a user or an admin"
      operationId: "getProducts"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Product"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedBothError'
      security:
        - bearerBothAuth: []
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      description: "The admin can add a new product"
      operationId: "addProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "Success"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedUserError'
      security:
        - bearerAdminAuth: []
  /products/{Id}:
    get:
      tags:
      - "product"
      summary: "Find product by ID"
      description: "Returns a single product. This can only be done with a Token, no matter if you are a user or a admin"
      operationId: "getProductById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - name: "Id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
        403:
          $ref: '#/responses/UnauthorizedBothError'
      security:
        - bearerBothAuth: []
    put:
      tags:
      - "product"
      summary: "Updates a product in the store. This can only be done by a admin"
      description: ""
      operationId: "updateProductWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - name: "Id"
        in: "path"
        description: "/products/:id"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "Success"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedUserError'
      security:
        - bearerAdminAuth: []
    delete:
      tags:
      - "product"
      summary: "Deletes a product. This can only be done by a admin"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - name: "Id"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedUserError'
      security:
        - bearerAdminAuth: []
     
  /orders:
    get:
      tags:
      - "order"
      summary: "Returns all orders. This can only be done by a admin"
      description: "Returns a map of status codes to quantities"
      operationId: "getOrders"
      produces:
      - "application/json"
      parameters: 
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedUserError'
      security:
       - bearerAdminAuth: []
    post:
      tags:
      - "order"
      summary: "Add a new order"
      description: "Making an order. This can only be done by a user"
      operationId: "postOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Order object that needs to be added to the store"
        required: true
        schema:
            type: object
            properties:
              id:
                type: "integer"
                format: "int64"
                example: 5
              userId:
                type: "integer"
                format: "int64"
                example: 1
              paymentMethod:
                type: "string"
                enum: ['efectivo', 'debito', 'credito']
                example: debito
              price:
                type: "integer"
                example: 19.99
              state:
                type: "string"
                enum: ["entregado", "enviando", "preparando", "confirmado", "nuevo"]
                example: entregado
              products:
                type: "array"
                items:
                  type: object
                  properties:
                    productId:
                      type: "integer"
                      example: 3
                    productCuantity:
                      type: "integer"
                      example: 2
      responses:
        200:
          description: "Order created successfully"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedAdminError'
      security:
       - bearerUserAuth: []
  /orders/{Id}:
    get:
      tags:
      - "order"
      summary: "Find purchase order by ID, to show details. This can only be done by a user"
      description: "A user can get an order"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - name: "Id"
        in: "path"
        description: "ID of product that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedAdminError'
      security:
       - bearerUserAuth: []
    put:
      tags:
      - "order"
      summary: "Find purchase order by ID, to update"
      description: "An administrator can update an order."
      operationId: "putOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: body
        schema:
          type: object
          required:
            - state
          properties:
            state:
              type: string
              enum:
              - "entregado"
              - "enviando"
              - "preparando"
              - "confirmado"
              - "nuevo"
              example: "enviando"
      - name: "Id"
        in: "path"
        description: "ID of product that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedUserError'
      security:
       - bearerAdminAuth: []
    delete:
      tags:
      - "order"
      summary: "Delete order by ID"
      description: "An administrator can delete an order"
      operationId: "updateOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Token"
        description: "Authorization: Bearer [token]"
        in: "header"
        required: true
        type: "string"
      - name: "Id"
        in: "path"
        description: "ID of product that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        500:
          description: "Internal Error"
        403:
          $ref: '#/responses/UnauthorizedUserError'
      security:
       - bearerAdminAuth: []
  
securityDefinitions:
  bearerAdminAuth:
    type: apiKey
    in: header
    name: X-API-Key
  bearerUserAuth:
    type: apiKey
    in: header
    name: X-API-Key
  bearerBothAuth:
    type: apiKey
    in: header
    name: X-API-Key
responses:
  UnauthorizedAdminError:
    description: Administrators are not allowed to make this request
    headers:
      Authorization:
        description: Bearer [token]
        type: string
  UnauthorizedUserError:
    description: Users are not allowed to make this request
    headers:
      Authorization:
        description: Bearer [token]
        type: string
  UnauthorizedBothError:
    description: Invalid Token
    headers:
      Authorization:
        description: Bearer [token]
        type: string
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      paymentMethod:
        type: "string"
        enum:
        - 'efectivo'
        - 'debito'
        - 'credito'
      price:
        type: "string"
      state:
        type: "string"
        description: "Order Status"
        enum:
        - "entregado"
        - "enviando"
        - "preparando"
        - "confirmado"
        - "nuevo"
    xml:
      name: "Order"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      type:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      price:
        type: "integer"
      img:
        type: "string"
    xml:
      name: "Pet"
  Cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      orderId:
        type: "integer"
        format: "int64"
      productId:
        type: "integer"
        format: "int64"
      productCuantity:
        type: "string"
    xml:
      name: "Cart"